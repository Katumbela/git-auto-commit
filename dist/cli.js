#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const path_1 = __importDefault(require("path"));
const process_1 = require("process");
const targetDir = '.';
function getCommitType(status) {
    if (status === 'A')
        return 'feat';
    if (status === 'M')
        return 'fix';
    if (status === 'D')
        return 'chore';
    if (status === 'U')
        return 'chore';
    return 'chore';
}
function generateMessageFromDiff(diff, file) {
    var _a;
    const messages = [];
    // Detec√ß√£o de adi√ß√£o de fun√ß√£o
    if (/^\+?\s*function\s+(\w+)/.test(diff)) {
        const functionName = (_a = diff.match(/function\s+(\w+)/)) === null || _a === void 0 ? void 0 : _a[1];
        messages.push(`Cria√ß√£o da fun√ß√£o ${functionName} no arquivo ${file}`);
    }
    // Detec√ß√£o de cria√ß√£o de bot√£o
    if (/^\+?\s*<button/.test(diff)) {
        messages.push(`Cria√ß√£o de um bot√£o no arquivo ${file}`);
    }
    // Detec√ß√£o de cria√ß√£o de imagem
    if (/^\+?\s*<img/.test(diff)) {
        messages.push(`Cria√ß√£o de uma imagem no arquivo ${file}`);
    }
    // Detec√ß√£o de estiliza√ß√£o CSS
    if (/^\+?\s*(background-color|color|font-size)/.test(diff)) {
        messages.push(`Estiliza√ß√£o de CSS no arquivo ${file}`);
    }
    // Detec√ß√£o de adi√ß√£o de coment√°rio
    if (/^\+?\s*\/\/\s/.test(diff)) {
        messages.push(`Adi√ß√£o de um coment√°rio no arquivo ${file}`);
    }
    // Detec√ß√£o de adi√ß√£o de log no console
    if (/^\+?\s*console\.log/.test(diff)) {
        messages.push(`Adi√ß√£o de log no console no arquivo ${file}`);
    }
    // Detec√ß√£o de adi√ß√£o de importa√ß√£o
    if (/^\+?\s*import/.test(diff)) {
        messages.push(`Adi√ß√£o de importa√ß√£o no arquivo ${file}`);
    }
    // Detec√ß√£o de manipula√ß√£o de DOM
    if (/^\+?\s*(document\.querySelector|document\.getElementById)/.test(diff)) {
        messages.push(`Manipula√ß√£o de DOM no arquivo ${file}`);
    }
    // Detec√ß√£o de adi√ß√£o ou remo√ß√£o de c√≥digo
    if (/^\+/.test(diff) && !/-/.test(diff)) {
        messages.push(`Adi√ß√£o de c√≥digo no arquivo ${file}`);
    }
    if (/-/.test(diff) && !/\+/.test(diff)) {
        messages.push(`Remo√ß√£o de c√≥digo no arquivo ${file}`);
    }
    if (/^\+/.test(diff) && /-/.test(diff)) {
        messages.push(`Modifica√ß√£o de c√≥digo no arquivo ${file}`);
    }
    // Detec√ß√£o de altera√ß√£o de espa√ßos ou linhas em branco
    if (/^\s+$/.test(diff)) {
        messages.push(`Altera√ß√£o de espa√ßo ou linhas em branco no arquivo ${file}`);
    }
    // Detec√ß√£o de altera√ß√£o de texto
    if (/^\+?\s*text/.test(diff)) {
        messages.push(`Altera√ß√£o de texto no arquivo ${file}`);
    }
    // Detec√ß√£o de cria√ß√£o de constante ou vari√°vel
    if (/^\+?\s*const\s+\w+\s*=/.test(diff)) {
        messages.push(`Cria√ß√£o de uma constante no arquivo ${file}`);
    }
    if (/^\+?\s*(let|var)\s+\w+\s*=/.test(diff)) {
        messages.push(`Cria√ß√£o de uma vari√°vel no arquivo ${file}`);
    }
    // Detec√ß√£o de altera√ß√£o em componente React
    if (/^\+?\s*(React\.Component|function\s+\w+\(.*\)\s*{)/.test(diff)) {
        messages.push(`Altera√ß√£o em componente React no arquivo ${file}`);
    }
    // Detec√ß√£o de adi√ß√£o de novo import
    if (/^\+?\s*import\s+\w+/.test(diff)) {
        messages.push(`Adi√ß√£o de novo import no arquivo ${file}`);
    }
    // Detec√ß√£o de mudan√ßa de texto em elemento HTML
    if (/^\+?\s*>\s*\w+.*<\/\w+>/.test(diff)) {
        messages.push(`Mudan√ßa de texto em um elemento HTML no arquivo ${file}`);
    }
    // Detec√ß√£o de cria√ß√£o de novo m√©todo de classe
    if (/^\+?\s*(public|private|protected)?\s*\w+\s*\(.*\)\s*{/.test(diff)) {
        messages.push(`Cria√ß√£o de um novo m√©todo de classe no arquivo ${file}`);
    }
    // Detec√ß√£o de adi√ß√£o de estilo inline
    if (/^\+?\s*style=\{[^}]+\}/.test(diff)) {
        messages.push(`Adi√ß√£o de um novo estilo inline no arquivo ${file}`);
    }
    // Detec√ß√£o de cria√ß√£o de novo arquivo
    if (/^\+\s*$/.test(diff)) {
        messages.push(`Cria√ß√£o de um novo arquivo ${file}`);
    }
    // Detec√ß√£o de remo√ß√£o de linhas de c√≥digo
    if (/^-/.test(diff)) {
        messages.push(`Remo√ß√£o de linhas de c√≥digo no arquivo ${file}`);
    }
    // Detec√ß√£o de cria√ß√£o de novo elemento HTML
    if (/^<\w+/.test(diff)) {
        messages.push(`Cria√ß√£o de um novo elemento HTML no arquivo ${file}`);
    }
    // Detec√ß√£o de mudan√ßa na estrutura de pastas
    if (/^\s*mv\s+/.test(diff)) {
        messages.push(`Mudan√ßa na estrutura de pastas no arquivo ${file}`);
    }
    // Detec√ß√£o de altera√ß√£o em fun√ß√µes de manipula√ß√£o de eventos
    if (/^\+?\s*(addEventListener|onClick|onChange)/.test(diff)) {
        messages.push(`Altera√ß√£o em fun√ß√µes de manipula√ß√£o de eventos no arquivo ${file}`);
    }
    // Detec√ß√£o de altera√ß√£o de conte√∫do em array ou objeto
    if (/^\+?\s*\w+\s*=\s*\[.*\]|\w+\s*=\s*{.*}/.test(diff)) {
        messages.push(`Altera√ß√£o de conte√∫do em um array ou objeto no arquivo ${file}`);
    }
    // Detec√ß√£o de cria√ß√£o de testes unit√°rios
    if (/^\+?\s*(describe\(|it\(|test\()/.test(diff)) {
        messages.push(`Cria√ß√£o de testes unit√°rios no arquivo ${file}`);
    }
    // Se n√£o houver mensagens espec√≠ficas, considera como altera√ß√µes gerais ou refatora√ß√£o
    if (messages.length === 0) {
        messages.push(`Altera√ß√µes gerais ou refatora√ß√£o no arquivo ${file}`);
    }
    return messages.join('; ');
}
function run() {
    try {
        process.chdir(path_1.default.resolve(targetDir));
        let count = 1;
        let pushAfterCommit = false;
        const args = process_1.argv.slice(2);
        if (args.includes('--all') || args.includes('-a')) {
            console.log('üì¶ Comitando todos os arquivos de uma vez.');
            const allFiles = (0, child_process_1.execSync)('git status --porcelain').toString().trim().split('\n');
            allFiles.forEach(line => {
                const [status, file] = [line.slice(0, 2), line.slice(3)];
                const commitType = getCommitType(status);
                if (file) {
                    console.log(`üìÅ Adicionando arquivo ${file}`);
                    (0, child_process_1.execSync)(`git add "${file}"`);
                    const diff = (0, child_process_1.execSync)(`git diff -- "${file}"`).toString();
                    const message = generateMessageFromDiff(diff, file);
                    (0, child_process_1.execSync)(`git commit -m "${commitType}: ${message}"`);
                    console.log(`‚úÖ Arquivo ${file} commitado com sucesso.`);
                }
            });
            console.log('‚úÖ Todos os arquivos foram commitados.');
        }
        else {
            if (args.includes('--push') || args.includes('-p')) {
                pushAfterCommit = true;
            }
            const untrackedFiles = (0, child_process_1.execSync)('git ls-files --others --exclude-standard').toString().trim().split('\n');
            untrackedFiles.forEach(file => {
                if (file) {
                    console.log(`üìÅ Adicionando ficheiro n√£o rastreado ${file}`);
                    (0, child_process_1.execSync)(`git add "${file}"`);
                    const diff = (0, child_process_1.execSync)(`git diff -- "${file}"`).toString();
                    const message = generateMessageFromDiff(diff, file);
                    (0, child_process_1.execSync)(`git commit -m "feat: ${message}"`);
                    console.log(`‚úÖ Ficheiro n√£o rastreado commitado ${file}`);
                }
            });
            const modifiedFiles = (0, child_process_1.execSync)('git diff --name-only').toString().trim().split('\n');
            modifiedFiles.forEach(file => {
                if (file) {
                    console.log(`üìù Adicionando ficheiro modificado ${file}`);
                    (0, child_process_1.execSync)(`git add "${file}"`);
                    const diff = (0, child_process_1.execSync)(`git diff -- "${file}"`).toString();
                    const message = generateMessageFromDiff(diff, file);
                    (0, child_process_1.execSync)(`git commit -m "fix: ${message}"`);
                    console.log(`‚úÖ Ficheiro modificado commitado ${file}`);
                }
            });
            if (pushAfterCommit) {
                console.log('üöÄ Enviando altera√ß√µes para o reposit√≥rio remoto.');
                (0, child_process_1.execSync)('git push');
                console.log('‚úÖ Altera√ß√µes enviadas com sucesso.');
            }
        }
    }
    catch (error) {
        console.error('Erro ao executar seus commits:', error.message);
    }
}
run();
